import subprocess
import telebot
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import logging
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()



TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
HEAD_MAPPING = json.loads(os.getenv('HEAD_MAPPING'))
reversed_dict = {v: k for k, v in HEAD_MAPPING.items()} # –î–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π

if not TELEGRAM_BOT_TOKEN:
    print("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env!")
    exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_DIR = './logs'
os.makedirs(LOG_DIR, exist_ok=True)
log_file = os.path.join(LOG_DIR, f"{datetime.now().strftime('%d-%m-%Y')}.log")
logging.basicConfig(
    filename=log_file,
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    encoding='utf-8'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
DB_PATH = './schedule.db'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_context = {}

# –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
STATUS_MAPPING = {
    'work': '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å üë®üèª‚Äçüíª',
    'dayoff': '–í—ã—Ö–æ–¥–Ω–æ–π üå¥',
    'vacation': '–û—Ç–ø—É—Å–∫ ‚úàÔ∏è',
    'duty': '–î–µ–∂—É—Ä–Ω—ã–π üö®'
}

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
SPECIAL_CHARS = r"_\*\[\]\(\)~`>#+\-=|{}\."

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    import re
    return re.sub(f'([{SPECIAL_CHARS}])', r'\\\1', text)

def get_weekday(date_str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY"""
    weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    date_obj = datetime.strptime(date_str, '%d.%m.%Y')
    return weekdays[date_obj.weekday()]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    logging.info(f"{user_info} sent /start")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_duty = telebot.types.KeyboardButton("–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç?")
    button_schedule = telebot.types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    markup.add(button_duty, button_schedule)
    bot.send_message(message.chat.id, "–ú–∞—Ç—Ä–æ—Å–∫–∏–Ω v2.7. –¢–µ–ø–µ—Ä—å —è –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏ —É–º–µ—é –≤ —Å–ø—Ä–∞–≤–∫—É (/help)", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update195 (–æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
@bot.message_handler(commands=['update195'])
def update_195(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    logging.info(f"{user_info} sent /update195")
    try:
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã python ./main.py
        result = subprocess.run(['python', './main.py'], capture_output=True, text=True)
        if result.returncode == 0:
            bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:\n" + result.stdout)
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n" + result.stderr)
        logging.info(f"{user_info} - Command executed with return code {result.returncode}")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"{user_info} - Error: {e}")


#–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç?
@bot.message_handler(func=lambda message: message.text == "–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç?")
def who_is_on_duty(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    logging.info(f"{user_info} requested '–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç?'")
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–æ–∫–∞–º –∫–∞–∫ –∫ —Å–ª–æ–≤–∞—Ä—è–º
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        now = datetime.now()
        current_date = now.strftime('%d.%m.%Y')
        current_time = now.time()

        # –õ–æ–≥ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        query = """
        SELECT * FROM schedule
        WHERE Date = ?
        """
        cursor.execute(query, (current_date,))
        rows = cursor.fetchall()

        if not rows:
            bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–∂—É—Ä–∏—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            logging.info(f"{user_info} - No duty data available for today")
            print("–ù–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        # –õ–æ–≥ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: {rows}")

        # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "duty" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        on_duty = []
        for row in rows:
            time_range = row["Time"]
            if is_time_in_range(time_range, current_time):
                for col_name in row.keys():  # –î–æ—Å—Ç—É–ø –∫ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫
                    value = row[col_name]  # –î–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–æ–ª–æ–Ω–æ–∫
                    if value == "duty":
                        on_duty.append(col_name)

        # –õ–æ–≥ –∫–æ–ª–æ–Ω–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–î–µ–∂—É—Ä–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {on_duty}")

        if on_duty:
            bot.send_message(message.chat.id, f"–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä—è—Ç: {', '.join(on_duty)}")
            logging.info(f"{user_info} - On duty: {', '.join(on_duty)}")
        else:
            bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–∂—É—Ä–∏—Ç.")
            logging.info(f"{user_info} - No one is on duty now")

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"{user_info} - Error: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def my_schedule_handler(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    logging.info(f"{user_info} requested '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'")
    user_info_id = f"@{message.from_user.username or 'No username'}"
    
    user_info_name = reversed_dict.get(user_info_id)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    buttons = []
    buttons.append(telebot.types.KeyboardButton("–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) # –î–æ–±–∞–≤–∏–ª–∏ —Å–µ–±—è
    for user in HEAD_MAPPING.keys():
        if user not in ["–î–∞—Ç–∞", "–ò–Ω—Ç–µ—Ä–≤–∞–ª", user_info_name] :  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –∏ —Å–µ–±—è
            buttons.append(telebot.types.KeyboardButton(user))
    
    markup.add(*buttons)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    user_context[message.chat.id] = {'command': 'select_user'}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.chat.id in user_context and user_context[message.chat.id]['command'] == 'select_user')
def handle_user_selection(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    user_info_id = f"@{message.from_user.username or 'No username'}"
    user_info_name = reversed_dict.get(user_info_id)

    selected_user = message.text.strip()
    
    if message.text.strip() == "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        selected_user = user_info_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ HEAD_MAPPING
    if selected_user not in HEAD_MAPPING:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        logging.info(f"{user_info} - Invalid user selected: {selected_user}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    user_context[message.chat.id]['selected_user'] = selected_user
    user_context[message.chat.id]['command'] = 'my_schedule'  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞"),
        telebot.types.KeyboardButton("3Ô∏è‚É£"),
        telebot.types.KeyboardButton("7Ô∏è‚É£"),
        telebot.types.KeyboardButton("–ü–æ–∫–∞–∂–∏ –≤–µ—Å—å –º–µ—Å—è—Ü")
    )
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_user}. –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? üóì", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –∏ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.chat.id in user_context and user_context[message.chat.id]['command'] == 'my_schedule')
def handle_schedule_days_input(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    try:
        user_input = message.text.strip()
        if user_input == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            days = 2
        elif user_input == "3Ô∏è‚É£":
            days = 4
        elif user_input == "7Ô∏è‚É£":
            days = 8
        elif user_input == "–ü–æ–∫–∞–∂–∏ –≤–µ—Å—å –º–µ—Å—è—Ü":
            days = 31  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        else:
            days = int(user_input)

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        selected_user = user_context[message.chat.id].get('selected_user')
        if not selected_user:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—á–∞–ª–∞.")
            logging.info(f"{user_info} - No user selected.")
            return

        # –ü–æ–ª—É—á–∞–µ–º Telegram-username –∏–∑ —Å–ª–æ–≤–∞—Ä—è HEAD_MAPPING
        username = HEAD_MAPPING.get(selected_user)
        if not username:
            bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
            logging.info(f"{user_info} - No username found for {selected_user}.")
            return

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now()
        last_day = today.replace(day=1) + timedelta(days=32)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        last_day = last_day.replace(day=1) - timedelta(days=1)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        end_date = today + timedelta(days=days - 1)

        if (days != 31):
            
            if end_date > last_day:
                end_date = last_day
                bot.send_message(message.chat.id, "–Ø –ø–æ–∫–∞ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞, —Å–æ—Ä—Ä–∏")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è SQL
            start_date_str = today.strftime('%d.%m.%Y')
            end_date_str = end_date.strftime('%d.%m.%Y')
        else:
            start_date_str = today.replace(day=1).strftime('%d.%m.%Y')
            end_date_str = (today.replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)
            end_date_str = end_date_str.strftime('%d.%m.%Y')

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = f"""
        SELECT Date, Time, `{username}`
        FROM schedule
        WHERE Date BETWEEN ? AND ?
        """
        cursor.execute(query, (start_date_str, end_date_str))
        rows = cursor.fetchall()

        if not rows:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
            logging.info(f"{user_info} - No schedule found for {username}")
        else:
            schedule = []
            for row in rows:
                status = row[username]
                if status is None:
                    continue
                formatted_status = STATUS_MAPPING.get(status, status)
                weekday = get_weekday(row['Date'])
                today_marker = " üëà –°–µ–≥–æ–¥–Ω—è" if row['Date'] == today.strftime('%d.%m.%Y') else ""
                if status == 'duty':
                    schedule.append(f"*{escape_markdown(row['Date'])}* \\({escape_markdown(weekday)}\\) \\- {escape_markdown(formatted_status)} {escape_markdown(row['Time'])}{escape_markdown(today_marker)}\n")
                else:
                    schedule.append(f"*{escape_markdown(row['Date'])}* \\({escape_markdown(weekday)}\\) \\- {escape_markdown(formatted_status)}{escape_markdown(today_marker)}\n")

            if schedule:
                table = "\n".join(schedule)
                bot.send_message(message.chat.id, table, parse_mode="MarkdownV2")
                logging.info(f"{user_info} - Schedule sent for {username}")
            else:
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
                logging.info(f"{user_info} - No schedule found after filtering for {username}")

        # –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_duty = telebot.types.KeyboardButton("–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç?")
        button_schedule = telebot.types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        markup.add(button_duty, button_schedule)
        bot.send_message(message.chat.id, "____________", reply_markup=markup)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        logging.info(f"{user_info} - Invalid input for schedule days.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"{user_info} - Error: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
        user_context.pop(message.chat.id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/update195 - –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç? - –£–∑–Ω–∞—Ç—å, –∫—Ç–æ –¥–µ–∂—É—Ä–∏—Ç —Å–µ–≥–æ–¥–Ω—è
–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    bot.send_message(message.chat.id, help_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
def is_time_in_range(time_range, current_time):
    try:
        start_time, end_time = time_range.split('-')
        start_time = datetime.strptime(start_time.strip(), '%H:%M').time()
        end_time = datetime.strptime(end_time.strip(), '%H:%M').time()

        if start_time <= end_time:
            return start_time <= current_time <= end_time
        else:  # –°–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–º–µ–Ω–∞ –Ω–æ—á–Ω–∞—è
            return current_time >= start_time or current_time <= end_time
    except ValueError:
        return False
    

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
