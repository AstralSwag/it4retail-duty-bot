import pandas as pd
import sqlite3
import requests
from datetime import datetime
import dotenv
from dotenv import load_dotenv
import os
import json

load_dotenv()
head_mapping = json.loads(os.getenv('HEAD_MAPPING'))


def download_and_process_schedule(csv_url):

    if not csv_url:
        print("URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        exit()

    # –°–∫–∞—á–∏–≤–∞–µ–º CSV —Ñ–∞–π–ª
    response = requests.get(csv_url)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open('schedule.csv', 'wb') as f:
            f.write(response.content)
        print("CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'schedule.csv'.")
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {response.status_code}")
        exit()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV-—Ñ–∞–π–ª
    file_path = './schedule.csv'
    df = pd.read_csv(file_path)

    # –û–±—Ä–µ–∑–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π
    columns_to_keep = [col for col in df.columns if 'Unnamed' not in col]
    df_filtered = df[columns_to_keep].copy()  # –°–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –Ω–µ—ë
    date_rows = df_filtered['–î–∞—Ç–∞'].dropna()
    last_date_index = date_rows.last_valid_index()
    df_filtered = df_filtered.loc[:last_date_index]

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ '–î–∞—Ç–∞' –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
    df_filtered['–î–∞—Ç–∞'] = df_filtered['–î–∞—Ç–∞'].ffill()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    df_filtered['–î–∞—Ç–∞'] = df_filtered['–î–∞—Ç–∞'].apply(get_date)

    status_mapping = {
        '—Ä': 'work',
        '–æ': 'vacation',
        '+': 'duty',
        '–≤': 'dayoff'
    }

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    df_filtered.rename(columns=head_mapping, inplace=True)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–æ–≤
    for col in df_filtered.columns[2:]:  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç—Ä–µ—Ç—å–µ–π –∫–æ–ª–æ–Ω–∫–∏, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∏–º–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        df_filtered[col] = df_filtered[col].replace(status_mapping)  # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å –ø–æ–º–æ—â—å—é replace

    # –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    db_name = './schedule.db'
    table_name = 'schedule'

    conn = sqlite3.connect(db_name)
    df_filtered.to_sql(table_name, conn, if_exists='replace', index=False)
    conn.close()

    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


def get_date(rus_date):
    parts = rus_date.split(', ')
    day = parts[1].split(' ')[0]
    month_cyr = parts[1].split(' ')[1][:3]  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞

    month_mapping = {
        '—è–Ω–≤': '01',
        '—Ñ–µ–≤': '02',
        '–º–∞—Ä': '03',
        '–∞–ø—Ä': '04',
        '–º–∞–π': '05',
        '–∏—é–Ω': '06',
        '–∏—é–ª': '07',
        '–∞–≤–≥': '08',
        '—Å–µ–Ω': '09',
        '–æ–∫—Ç': '10',
        '–Ω–æ—è': '11',
        '–¥–µ–∫': '12'
    }
    month = month_mapping.get(month_cyr)
    if not month:
        raise ValueError(f"Unknown month abbreviation: {month_cyr}")


    year = datetime.now().strftime('%Y')
    return f"{day.zfill(2)}.{month}.{year}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def my_schedule_handler(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    logging.info(f"{user_info} requested '–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞"),
        telebot.types.KeyboardButton("3Ô∏è‚É£"),
        telebot.types.KeyboardButton("7Ô∏è‚É£"),
        telebot.types.KeyboardButton("–ü–æ–∫–∞–∂–∏ –≤–µ—Å—å –º–µ—Å—è—Ü")
    )
    bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? üóì", reply_markup=markup)
    user_context[message.chat.id] = {'command': 'my_schedule'}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –∏ –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@bot.message_handler(func=lambda message: message.chat.id in user_context and user_context[message.chat.id]['command'] == 'my_schedule')
def handle_schedule_days_input(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    try:
        user_input = message.text.strip()
        if user_input == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            days = 2
        elif user_input == "3Ô∏è‚É£":
            days = 4
        elif user_input == "7Ô∏è‚É£":
            days = 8
        elif user_input == "–ü–æ–∫–∞–∂–∏ –≤–µ—Å—å –º–µ—Å—è—Ü":
            days = 31  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        else:
            days = int(user_input)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—è HEAD_MAPPING
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ user_context
        if 'selected_user' in user_context.get(message.chat.id, {}):
            selected_user = user_context[message.chat.id]['selected_user']
            username = HEAD_MAPPING.get(selected_user)
        else:
            username = f"@{message.from_user.username}" if message.from_user.username else None

        if not username:
            bot.send_message(message.chat.id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
            logging.info(f"{user_info} - No username provided, schedule lookup failed.")
            return

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now()
        last_day = today.replace(day=1) + timedelta(days=32)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        last_day = last_day.replace(day=1) - timedelta(days=1)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        end_date = today + timedelta(days=days - 1)
        if end_date > last_day:
            end_date = last_day
            bot.send_message(message.chat.id, "–Ø –ø–æ–∫–∞ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞, —Å–æ—Ä—Ä–∏")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è SQL
        start_date_str = today.strftime('%d.%m.%Y')
        end_date_str = end_date.strftime('%d.%m.%Y')

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = f"""
        SELECT Date, Time, `{username}`
        FROM schedule
        WHERE Date BETWEEN ? AND ?
        """
        cursor.execute(query, (start_date_str, end_date_str))
        rows = cursor.fetchall()

        if not rows:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
            logging.info(f"{user_info} - No schedule found for {username}")
        else:
            schedule = []
            for row in rows:
                status = row[username]
                if status is None:
                    continue
                formatted_status = STATUS_MAPPING.get(status, status)
                weekday = get_weekday(row['Date'])
                today_marker = " üëà –°–µ–≥–æ–¥–Ω—è" if row['Date'] == today.strftime('%d.%m.%Y') else ""
                if status == 'duty':
                    schedule.append(f"*{escape_markdown(row['Date'])}* \\({escape_markdown(weekday)}\\) \\- {escape_markdown(formatted_status)} {escape_markdown(row['Time'])}{escape_markdown(today_marker)}\n")
                else:
                    schedule.append(f"*{escape_markdown(row['Date'])}* \\({escape_markdown(weekday)}\\) \\- {escape_markdown(formatted_status)}{escape_markdown(today_marker)}\n")

            if schedule:
                table = "\n".join(schedule)
                bot.send_message(message.chat.id, table, parse_mode="MarkdownV2")
                logging.info(f"{user_info} - Schedule sent for {username}")
            else:
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {selected_user} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
                logging.info(f"{user_info} - No schedule found after filtering for {username}")

        # –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_duty = telebot.types.KeyboardButton("–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç?")
        button_schedule = telebot.types.KeyboardButton("–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        markup.add(button_duty, button_schedule)
        bot.send_message(message.chat.id, "____________", reply_markup=markup)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        logging.info(f"{user_info} - Invalid input for schedule days.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"{user_info} - Error: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
        user_context.pop(message.chat.id, None)