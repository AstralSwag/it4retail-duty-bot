#–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def my_schedule_handler(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    logging.info(f"{user_info} requested '–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'")
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        telebot.types.KeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞"),
        telebot.types.KeyboardButton("3Ô∏è‚É£"),
        telebot.types.KeyboardButton("7Ô∏è‚É£"),
        telebot.types.KeyboardButton("–ü–æ–∫–∞–∂–∏ –≤–µ—Å—å –º–µ—Å—è—Ü")
    )
    bot.send_message(message.chat.id, "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –≤—ã–≤–µ—Å—Ç–∏ —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? üóì", reply_markup=markup)
    user_context[message.chat.id] = {'command': 'my_schedule'}

@bot.message_handler(func=lambda message: message.chat.id in user_context and user_context[message.chat.id]['command'] == 'my_schedule')
def handle_schedule_days_input(message):
    user_info = f"User: {message.from_user.first_name} (@{message.from_user.username or 'No username'})"
    try:
        user_input = message.text.strip()
        if user_input == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            days = 2
        elif user_input == "3Ô∏è‚É£":
            days = 4
        elif user_input == "7Ô∏è‚É£":
            days = 8
        elif user_input == "–ü–æ–∫–∞–∂–∏ –≤–µ—Å—å –º–µ—Å—è—Ü":
            days = 31  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        else:
            days = int(user_input)

        username = f"@{message.from_user.username}" if message.from_user.username else None

        if not username:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞ –≤ Telegram. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ.")
            logging.info(f"{user_info} - No username provided, schedule lookup failed.")
            return

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now()
        last_day = today.replace(day=1) + timedelta(days=32)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        last_day = last_day.replace(day=1) - timedelta(days=1)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        end_date = today + timedelta(days=days - 1)
        if end_date > last_day:
            end_date = last_day
            bot.send_message(message.chat.id, "—è –ø–æ–∫–∞ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞, —Å–æ—Ä—Ä–∏")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è SQL
        start_date_str = today.strftime('%d.%m.%Y')
        end_date_str = end_date.strftime('%d.%m.%Y')

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = f"""
        SELECT Date, Time, `{username}`
        FROM schedule
        WHERE Date BETWEEN ? AND ?
        """
        cursor.execute(query, (start_date_str, end_date_str))
        rows = cursor.fetchall()

        if not rows:
            bot.send_message(message.chat.id, "–¢–µ–±—è –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, —Å—Ç–∞—Ä–∏–Ω–∞")
            logging.info(f"{user_info} - No schedule found for {username}")
        else:
            schedule = []
            for row in rows:
                status = row[username]
                if status is None:
                    continue
                formatted_status = STATUS_MAPPING.get(status, status)
                weekday = get_weekday(row['Date'])
                today_marker = " üëà –°–µ–≥–æ–¥–Ω—è" if row['Date'] == today.strftime('%d.%m.%Y') else ""
                if status == 'duty':
                    schedule.append(f"*{escape_markdown(row['Date'])}* \\({escape_markdown(weekday)}\\) \\- {escape_markdown(formatted_status)} {escape_markdown(row['Time'])}{escape_markdown(today_marker)}\n")
                else:
                    schedule.append(f"*{escape_markdown(row['Date'])}* \\({escape_markdown(weekday)}\\) \\- {escape_markdown(formatted_status)}{escape_markdown(today_marker)}\n")

            if schedule:
                table = "\n".join(schedule)
                bot.send_message(message.chat.id, table, parse_mode="MarkdownV2")
                logging.info(f"{user_info} - Schedule sent for {username}")
            else:
                bot.send_message(message.chat.id, "–¢–µ–±—è –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, —Å—Ç–∞—Ä–∏–Ω–∞")
                logging.info(f"{user_info} - No schedule found after filtering for {username}")

        # –í–æ–∑–≤—Ä–∞—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_duty = telebot.types.KeyboardButton("–ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç?")
        button_schedule = telebot.types.KeyboardButton("–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        markup.add(button_duty, button_schedule)
        bot.send_message(message.chat.id, "____________", reply_markup=markup)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        logging.info(f"{user_info} - Invalid input for schedule days.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        logging.error(f"{user_info} - Error: {e}")
    finally:
        if 'conn' in locals():
            conn.close()
        user_context.pop(message.chat.id, None)
